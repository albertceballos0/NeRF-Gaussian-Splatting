#!/bin/bash
#SBATCH -n 4
#SBATCH -N 1
#SBATCH -D /tmp
#SBATCH -t 2-00:00
#SBATCH -p dcca40
#SBATCH --mem 8192
#SBATCH --gres gpu:1
#SBATCH -o train_%u_%j.out
#SBATCH -e train_%u_%j.err

conda activate nerfstudio

# Entrenamiento
ns-train nerfacto --data /hhome/aceballosa/NeRF-Gaussian-Splatting/datasets/trex --output-dir /hhome/aceballosa/NeRF-Gaussian-Splatting/outputs/train_01 --max-num-iterations 1000 --pipeline.model.cones-enable True --steps-per-eval-batch 100 --pipeline.datamanager.train-num-rays-per-batch 1024 --pipeline.datamanager.eval-num-rays-per-batch 1024 --data-parser-name dnerf

# Encontrar el último timestamp generado
OUTPUT_MODEL_PATH="/hhome/aceballosa/NeRF-Gaussian-Splatting/outputs/train_01/trex/nerfacto"
NEW_TIMESTAMP=$(ls -d "$OUTPUT_MODEL_PATH"/*/ | sort -n | tail -n 1)
NEW_TIMESTAMP=$(basename "$NEW_TIMESTAMP")

# Comprobar si existe el config.yml
CONFIG_PATH="$OUTPUT_MODEL_PATH/$NEW_TIMESTAMP/config.yml"
if [ ! -f "$CONFIG_PATH" ]; then
  echo "❌ No se encontró config.yml en $CONFIG_PATH"
  exit 1
fi

# Crear automáticamente el script de exportación
echo "Generando script de exportación para $NEW_TIMESTAMP"
python3 /hhome/aceballosa/NeRF-Gaussian-Splatting/setup_nerf_project.py export --dataset trex --model nerfacto --train-number "$NEW_TIMESTAMP"

# Lanzar exportación directamente
EXPORT_PATH="/hhome/aceballosa/NeRF-Gaussian-Splatting/exports/train_01/trex/nerfacto/$NEW_TIMESTAMP"
mkdir -p "$EXPORT_PATH"

ns-export pointcloud --load-config "$CONFIG_PATH" --output-dir "$EXPORT_PATH"   --num-points 1000000 --remove-outliers True --normal-method open3d --save-world-frame False

ns-export poisson --load-config "$CONFIG_PATH" --output-dir "$EXPORT_PATH"   --num-points 1000000 --remove-outliers True --normal-method open3d

conda deactivate
